// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')

describe('new hero', function() {
  this.timeout(30000)
  let driver
  let vars
  beforeEach(async function() {
    driver = await new Builder().forBrowser('chrome').build()
    vars = {}
  })
  afterEach(async function() {
    await driver.quit();
  })
  it('new hero', async function() {
    await driver.get("http://localhost:8080/")
    await driver.findElement(By.css(".form-group:nth-child(1) > .form-control")).click()
    assert.equal(await driver.findElement(By.css(".btn")).isEnabled(), false)
    await driver.findElement(By.css(".form-group:nth-child(1) > .form-control")).sendKeys("Thor")
    await driver.findElement(By.css(".form-group:nth-child(2) > .form-control")).click()
    await driver.findElement(By.css(".form-group:nth-child(2) > .form-control")).sendKeys("God of Thunder")
    // assers that By.css(".btn") is enabled
    assert.equal(await driver.findElement(By.css(".btn")).isEnabled(), true)
    await driver.findElement(By.css(".btn")).click()
    assert.equal(await driver.findElement(By.css(".btn")).isEnabled(), false)
  })
  it('new hero', async function() {
    await driver.get("http://localhost:8080/")
    await driver.findElement(By.css(".form-group:nth-child(1) > .form-control")).click()
    assert.equal(await driver.findElement(By.css(".btn")).isEnabled(), false)
    await driver.findElement(By.css(".form-group:nth-child(1) > .form-control")).sendKeys("Thor")
    assert.equal(await driver.findElement(By.css(".btn")).isEnabled(), true)
    await driver.findElement(By.css(".form-group:nth-child(1) > .form-control")).clear()
    await driver.findElement(By.css(".form-group:nth-child(1) > .form-control")).sendKeys("")
    // wait for the input to be cleared
    await driver.sleep(5000)
    assert.equal(await driver.findElement(By.css(".btn")).isEnabled(), false)
  })

})
